/*
 * Modern Gradle build for Don't Look Back game
 * Uses modern LWJGL 3.x and JBox2D for cross-platform gaming
 */

plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
    // Testing dependencies using version catalog
    testImplementation libs.bundles.testing
    
    // LWJGL 3.x dependencies using version catalog and BOM for version alignment
    implementation platform(libs.lwjgl.bom)
    
    // Core LWJGL modules using version catalog
    implementation libs.bundles.lwjgl.core
    
    // Native libraries for cross-platform support (must be declared individually)
    runtimeOnly "org.lwjgl:lwjgl::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl::natives-macos"
    
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-macos"
    
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-macos"
    
    runtimeOnly "org.lwjgl:lwjgl-stb::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-stb::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-stb::natives-macos"
    
    // Physics engine using version catalog
    implementation libs.jbox2d
}

// Configure source sets to use simplified structure
sourceSets {
    main {
        java {
            srcDirs = ["${project.rootDir}/src"]
            // Exclude legacy LWJGL 2.x specific classes
            exclude '**/DLB_Graphics.java'           // Legacy graphics system  
            exclude '**/Window.java'                 // Legacy window management
            exclude '**/VersionTest.java'            // Legacy version testing
        }
        resources {
            srcDirs = ["${project.rootDir}/res"]
        }
    }
    
    test {
        java {
            // Use the standard test directory for JUnit tests
            srcDirs = ["src/test/java"]
        }
    }
}

// Apply Java toolchain
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// Configure compiler options for better linting
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
        "-Xlint:all",           // Enable all warnings
        "-Xlint:-serial",       // Disable serialization warnings (not needed for games)
        "-Xlint:-processing",   // Disable annotation processing warnings
        "-Werror"               // Treat warnings as errors for better code quality
    ]
    options.deprecation = true
    options.encoding = 'UTF-8'
}

application {
    // Main class using simplified naming
    mainClass = 'dontlookback.DontLookBack'
}

// Create fat JAR task with modern dependencies only
task fatJar(type: Jar) {
    group = 'build'
    description = 'Create a runnable JAR with all modern dependencies included'
    
    archiveBaseName = 'DontLookBack'
    archiveClassifier = 'fat'
    archiveVersion = '1.0'
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    manifest {
        attributes(
            'Main-Class': 'dontlookback.DontLookBack',
            'Implementation-Title': 'Don\'t Look Back',
            'Implementation-Version': '1.0'
        )
    }
    
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    
    with jar
}

// Make fatJar depend on compileJava
fatJar.dependsOn compileJava

// Configure test framework for modern implementation
tasks.named('test') {
    useJUnitPlatform()
    
    // Enable headless mode for CI/CD compatibility
    systemProperty 'java.awt.headless', 'true'
    
    // Don't fail if no tests are discovered (while adding new features)
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'false'
    
    // Set test logging for better visibility
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Run the game (default application run)
run {
    mainClass = 'dontlookback.DontLookBack'
    jvmArgs = [
        '-Xms512m',
        '-Xmx1024m',
        // Enable hardware acceleration where available
        '-Dsun.java2d.opengl=true',
        // Use modern G1 garbage collector for better performance
        '-XX:+UseG1GC'
    ]
}

// Task to run headless demo for verification
task runDemo(type: JavaExec) {
    group = 'application'
    description = 'Run headless demo to verify modern dependencies'
    
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'dontlookback.HeadlessGameDemo'
    
    // Headless mode settings for CI/CD
    jvmArgs = [
        '-Djava.awt.headless=true'
    ]
}

// Task to run complete graphical demo
task runCompleteDemo(type: JavaExec) {
    group = 'application'
    description = 'Run complete graphical demo (auto-detects headless environment)'
    
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'dontlookback.CompleteGraphicalDemo'
    
    // Allow graphics detection - will auto-fallback to headless
    jvmArgs = [
        '-Xms512m',
        '-Xmx1024m'
    ]
}

// Comprehensive testing task
task testComprehensive(type: Test) {
    group = 'verification'
    description = 'Run comprehensive test suite'
    
    useJUnitPlatform()
    
    systemProperty 'java.awt.headless', 'true'
    
    testLogging {
        events = ["passed", "skipped", "failed"]
        exceptionFormat = "full"
    }
}

// Platform-native packaging using jpackage
task createNativePackage {
    group = 'distribution'
    description = 'Create platform-native self-contained application package'
    dependsOn fatJar
    
    def buildDirPath = layout.buildDirectory.dir('distributions')
    def jarFilePath = fatJar.archiveFile
    
    doLast {
        def buildDir = buildDirPath.get().asFile
        buildDir.mkdirs()
        
        def jarFile = jarFilePath.get().asFile
        def appName = 'DontLookBack'
        def mainClass = 'dontlookback.DontLookBack'
        def version = '1.0.0'
        
        // Create temporary input directory for jpackage
        def inputDir = new File(buildDir, 'input-native')
        if (inputDir.exists()) {
            inputDir.deleteDir()
        }
        inputDir.mkdirs()
        
        // Copy the fat JAR to input directory
        def copiedJar = new File(inputDir, jarFile.name)
        copiedJar.bytes = jarFile.bytes
        
        // Platform-specific packaging
        def os = System.getProperty('os.name').toLowerCase()
        def platformDir = new File(buildDir, 'native')
        platformDir.mkdirs()
        
        def jpackageCmd = ['jpackage',
            '--input', inputDir.absolutePath,
            '--name', appName,
            '--main-class', mainClass,
            '--main-jar', jarFile.name,
            '--dest', platformDir.absolutePath,
            '--app-version', version,
            '--description', 'Don\'t Look Back - Horror Survival Game',
            '--copyright', 'CRN Labs',
            '--vendor', 'CRN Labs'
        ]
        
        // Add platform-specific options
        if (os.contains('linux')) {
            jpackageCmd.addAll(['--linux-app-category', 'Game'])
            jpackageCmd.addAll(['--linux-shortcut'])
        } else if (os.contains('windows')) {
            jpackageCmd.addAll(['--win-console'])
            jpackageCmd.addAll(['--win-shortcut'])
            jpackageCmd.addAll(['--win-menu'])
        } else if (os.contains('mac')) {
            jpackageCmd.addAll(['--mac-package-identifier', 'com.crnlabs.dontlookback'])
        }
        
        println "Creating native package for ${os}..."
        println "Command: ${jpackageCmd.join(' ')}"
        
        def process = jpackageCmd.execute()
        process.waitFor()
        
        if (process.exitValue() == 0) {
            println "✓ Native package created successfully in build/distributions/native/"
            
            // List created files
            platformDir.eachFile { file ->
                println "  - ${file.name}"
            }
        } else {
            println "✗ Error creating native package:"
            println process.err.text
            println process.in.text
            println "Warning: Native package creation failed, continuing with other builds..."
            // Don't fail the build, just warn
        }
        
        // Clean up temporary input directory
        inputDir.deleteDir()
    }
}

// Enhanced Windows executable creation with embedded JRE
task createWindowsExecutable {
    group = 'distribution'
    description = 'Create Windows .exe with embedded JRE (no external Java required)'
    dependsOn fatJar
    
    def buildDirPath = layout.buildDirectory.dir('distributions')
    def jarFilePath = fatJar.archiveFile
    
    doLast {
        def buildDir = buildDirPath.get().asFile
        buildDir.mkdirs()
        
        def jarFile = jarFilePath.get().asFile
        def appName = 'DontLookBack'
        def mainClass = 'dontlookback.DontLookBack'
        def version = '1.0.0'
        
        // Create temporary input directory
        def inputDir = new File(buildDir, 'input-windows')
        if (inputDir.exists()) {
            inputDir.deleteDir()
        }
        inputDir.mkdirs()
        
        // Copy the fat JAR to input directory
        def copiedJar = new File(inputDir, jarFile.name)
        copiedJar.bytes = jarFile.bytes
        
        def windowsDir = new File(buildDir, 'windows-native')
        if (windowsDir.exists()) {
            windowsDir.deleteDir()
        }
        windowsDir.mkdirs()
        
        // Create Windows executable using jpackage with embedded JRE
        def jpackageCmd = ['jpackage',
            '--type', 'app-image',
            '--input', inputDir.absolutePath,
            '--name', appName,
            '--main-class', mainClass,
            '--main-jar', jarFile.name,
            '--dest', windowsDir.absolutePath,
            '--app-version', version,
            '--description', 'Don\'t Look Back - Horror Survival Game (Self-Contained)',
            '--copyright', 'CRN Labs',
            '--vendor', 'CRN Labs',
            '--java-options', '-Xmx2048m',
            '--java-options', '-Dsun.java2d.opengl=true'
        ]
        
        println "Creating Windows self-contained executable..."
        println "Command: ${jpackageCmd.join(' ')}"
        
        def process = jpackageCmd.execute()
        process.waitFor()
        
        if (process.exitValue() == 0) {
            println "✓ Windows executable created successfully in build/distributions/windows-native/"
            
            // Create a ZIP package for the Windows executable
            def windowsAppDir = new File(windowsDir, appName)
            if (windowsAppDir.exists()) {
                def zipFile = new File(buildDir, 'DontLookBack-Windows-SelfContained.zip')
                ant.zip(destfile: zipFile.absolutePath) {
                    fileset(dir: windowsAppDir.absolutePath)
                }
                println "✓ Windows ZIP package created: ${zipFile.name}"
            }
            
            // List created files
            windowsDir.eachFileRecurse { file ->
                if (file.isFile() && file.name.endsWith('.exe')) {
                    println "  - ${file.absolutePath}"
                }
            }
        } else {
            println "✗ Error creating Windows executable:"
            println process.err.text
            // Don't fail the build, just warn
            println "Warning: Windows executable creation failed, continuing with other builds..."
        }
        
        // Clean up temporary input directory
        inputDir.deleteDir()
    }
}

// Create platform-specific installer packages
task createInstallerPackages {
    group = 'distribution'
    description = 'Create platform-specific installer packages (DEB, RPM, MSI, DMG)'
    dependsOn fatJar
    
    def buildDirPath = layout.buildDirectory.dir('distributions')
    def jarFilePath = fatJar.archiveFile
    
    doLast {
        def buildDir = buildDirPath.get().asFile
        buildDir.mkdirs()
        
        def jarFile = jarFilePath.get().asFile
        def appName = 'DontLookBack'
        def mainClass = 'dontlookback.DontLookBack'
        def version = '1.0.0'
        
        // Create temporary input directory
        def inputDir = new File(buildDir, 'input')
        inputDir.mkdirs()
        
        def copiedJar = new File(inputDir, jarFile.name)
        copiedJar.bytes = jarFile.bytes
        
        def os = System.getProperty('os.name').toLowerCase()
        def installersDir = new File(buildDir, 'installers')
        installersDir.mkdirs()
        
        def baseCmd = ['jpackage',
            '--input', inputDir.absolutePath,
            '--name', appName,
            '--main-class', mainClass,
            '--main-jar', jarFile.name,
            '--dest', installersDir.absolutePath,
            '--app-version', version,
            '--description', 'Don\'t Look Back - Horror Survival Game',
            '--copyright', 'CRN Labs',
            '--vendor', 'CRN Labs'
        ]
        
        // Create different installer types based on platform
        def installerTypes = []
        if (os.contains('linux')) {
            installerTypes = ['deb', 'rpm']
        } else if (os.contains('windows')) {
            installerTypes = ['msi', 'exe']
        } else if (os.contains('mac')) {
            installerTypes = ['dmg', 'pkg']
        }
        
        installerTypes.each { type ->
            println "Creating ${type.toUpperCase()} installer..."
            
            def cmd = new ArrayList(baseCmd)
            cmd.addAll(['--type', type])
            
            if (type == 'deb' || type == 'rpm') {
                cmd.addAll(['--linux-app-category', 'Game'])
                cmd.addAll(['--linux-shortcut'])
            } else if (type == 'msi' || type == 'exe') {
                cmd.addAll(['--win-console'])
                cmd.addAll(['--win-shortcut'])
                cmd.addAll(['--win-menu'])
            } else if (type == 'dmg' || type == 'pkg') {
                cmd.addAll(['--mac-package-identifier', 'com.crnlabs.dontlookback'])
            }
            
            def process = cmd.execute()
            process.waitFor()
            
            if (process.exitValue() == 0) {
                println "✓ ${type.toUpperCase()} installer created successfully"
            } else {
                println "✗ Error creating ${type.toUpperCase()} installer:"
                println process.err.text
            }
        }
        
        // List all created installers
        println "\nCreated installers:"
        installersDir.eachFile { file ->
            println "  - ${file.name} (${file.length() / 1024 / 1024} MB)"
        }
        
        // Clean up
        inputDir.deleteDir()
    }
}

// Cross-platform distribution task
task createCrossPlatformDistribution {
    group = 'distribution'
    description = 'Create organized cross-platform distribution with native packages'
    dependsOn fatJar
    
    def buildDirPath = layout.buildDirectory.dir('distributions')
    def jarFilePath = fatJar.archiveFile
    
    doLast {
        def buildDir = buildDirPath.get().asFile
        def distDir = new File(buildDir, 'cross-platform')
        distDir.mkdirs()
        
        // Create platform directories
        def platforms = ['windows', 'linux', 'macos']
        platforms.each { platform ->
            new File(distDir, platform).mkdirs()
        }
        
        // Copy fat JAR to each platform directory
        def jarFile = jarFilePath.get().asFile
        platforms.each { platform ->
            def destFile = new File(distDir, "${platform}/${jarFile.name}")
            destFile.bytes = jarFile.bytes
        }
        
        // Create platform-specific launchers
        // Windows launcher
        def winDir = new File(distDir, 'windows')
        def batFile = new File(winDir, 'DontLookBack.bat')
        batFile.text = '''@echo off
title Don't Look Back - Horror Survival Game
echo ================================================
echo Don't Look Back - Horror Survival Game
echo ================================================
echo.
echo Starting game...
echo.
if not exist "%JAVA_HOME%\\bin\\java.exe" (
    echo Java not found in JAVA_HOME. Trying system PATH...
    java -Xmx2048m -jar DontLookBack-1.0-fat.jar
) else (
    "%JAVA_HOME%\\bin\\java.exe" -Xmx2048m -jar DontLookBack-1.0-fat.jar
)
echo.
echo Game closed. Press any key to exit.
pause >nul
'''
        
        // Linux launcher
        def linuxDir = new File(distDir, 'linux')
        def shFile = new File(linuxDir, 'DontLookBack.sh')
        shFile.text = '''#!/bin/bash
echo "================================================"
echo "Don't Look Back - Horror Survival Game"
echo "================================================"
echo
echo "Starting game..."
echo

# Check for Java
if command -v java >/dev/null 2>&1; then
    java -Xmx2048m -jar DontLookBack-1.0-fat.jar
else
    echo "Error: Java is not installed or not in PATH."
    echo "Please install Java 17 or later to run this game."
    exit 1
fi

echo
echo "Game closed."
'''
        shFile.setExecutable(true)
        
        // macOS launcher
        def macDir = new File(distDir, 'macos')
        def macFile = new File(macDir, 'DontLookBack.command')
        macFile.text = '''#!/bin/bash
echo "================================================"
echo "Don't Look Back - Horror Survival Game"
echo "================================================"
echo
echo "Starting game..."
echo

# Change to script directory
cd "$(dirname "$0")"

# Check for Java
if command -v java >/dev/null 2>&1; then
    java -Xmx2048m -jar DontLookBack-1.0-fat.jar
else
    echo "Error: Java is not installed or not in PATH."
    echo "Please install Java 17 or later to run this game."
    exit 1
fi

echo
echo "Game closed."
'''
        macFile.setExecutable(true)
        
        // Create README files for each platform
        platforms.each { platform ->
            def readmeFile = new File(distDir, "${platform}/README.txt")
            readmeFile.text = """Don't Look Back - Horror Survival Game
=====================================

Platform: ${platform.capitalize()}
Version: 1.0.0
Java Version Required: 17 or later

INSTALLATION:
=============
1. Ensure Java 17 or later is installed on your system
2. Run the launcher script for your platform:
   - Windows: Double-click DontLookBack.bat
   - Linux: Run ./DontLookBack.sh in terminal
   - macOS: Double-click DontLookBack.command

SYSTEM REQUIREMENTS:
==================
- Java 17 or later
- OpenGL 3.3+ compatible graphics card
- 2GB RAM minimum
- 100MB disk space

TROUBLESHOOTING:
===============
- If the game doesn't start, check Java installation
- For graphics issues, update your graphics drivers
- For performance issues, ensure you have sufficient RAM

Contact: https://github.com/crnlabs/DLB/issues
"""
        }
        
        println "✓ Cross-platform distribution created in build/distributions/cross-platform/"
        println "  - windows/ (with .bat launcher)"
        println "  - linux/ (with .sh launcher)" 
        println "  - macos/ (with .command launcher)"
        println "  - Each includes the fat JAR and platform-specific launcher"
    }
}

// Enhanced Javadoc configuration for comprehensive API documentation
javadoc {
    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        author = true
        version = true
        use = true
        windowTitle = "Don't Look Back API Documentation"
        docTitle = "Don't Look Back Game Engine API"
        header = "<b>Don't Look Back v1.0</b>"
        bottom = """
            <div style='text-align: center; padding: 10px; background: #f8f9fa; border-top: 1px solid #ddd; margin-top: 20px;'>
                <p><strong>Don't Look Back</strong> - Horror Survival Game Engine</p>
                <p>Built with Java 17, LWJGL 3.3.4, JBox2D | 
                <a href='https://github.com/crnlabs/DLB' target='_blank'>GitHub Repository</a> | 
                <a href='https://github.com/crnlabs/DLB/issues' target='_blank'>Report Issues</a></p>
            </div>
        """
        
        // Enhanced documentation options
        addStringOption('Xdoclint:all,-missing', '-quiet')
        addStringOption('tag', 'apiNote:a:API Note:')
        addStringOption('tag', 'implSpec:a:Implementation Requirements:')
        addStringOption('tag', 'implNote:a:Implementation Note:')
        
        // Add links to external dependencies
        links(
            'https://docs.oracle.com/en/java/javase/17/docs/api/',
            'https://javadoc.lwjgl.org/'
        )
    }
    
    // Include all source files
    include '**/*.java'
    
    // Fail gracefully on documentation warnings
    failOnError = false
    
    doLast {
        println "Javadoc generated successfully!"
        println "Documentation available at: ${destinationDir}/index.html"
    }
}

// Task to copy Javadoc to docs directory for GitHub Pages
task copyDocsToGitHubPages(type: Copy) {
    group = 'documentation'
    description = 'Copy generated Javadoc to docs directory for GitHub Pages deployment'
    dependsOn javadoc
    
    from javadoc.destinationDir
    into "${project.rootDir}/../docs/javadoc"
    
    doLast {
        println "Documentation copied to docs/javadoc for GitHub Pages"
    }
}

// Build everything - now with native packaging
task buildAll {
    group = 'build'
    description = 'Build complete distribution with native packages, cross-platform support, and documentation'
    dependsOn fatJar, createCrossPlatformDistribution, javadoc, copyDocsToGitHubPages
    
    doLast {
        // Try to create native packages without failing the build
        try {
            println "Attempting to create native packages..."
            project.tasks.createNativePackage.actions.each { action -> action.execute(project.tasks.createNativePackage) }
        } catch (Exception e) {
            println "Warning: Native package creation failed: ${e.message}"
        }
        
        try {
            println "Attempting to create Windows executable..."
            project.tasks.createWindowsExecutable.actions.each { action -> action.execute(project.tasks.createWindowsExecutable) }
        } catch (Exception e) {
            println "Warning: Windows executable creation failed: ${e.message}"
        }
        
        println "✓ Complete build finished successfully!"
    }
}

// Build installers for distribution
task buildInstallers {
    group = 'build'
    description = 'Build platform-specific installer packages (DEB, RPM, MSI, DMG)'
    dependsOn createInstallerPackages
}

// Quick build for development
task buildQuick {
    group = 'build'
    description = 'Quick build with fat JAR and cross-platform distribution'
    dependsOn fatJar, createCrossPlatformDistribution
}

// Developmental build with source code and all platforms
task buildDevelopmental {
    group = 'build'
    description = 'Create developmental build with source code, all native packages, and cross-platform support'
    dependsOn fatJar, createCrossPlatformDistribution, javadoc
    
    doLast {
        def buildDir = project.layout.buildDirectory.get().asFile
        def devBuildDir = new File(buildDir, 'developmental')
        devBuildDir.mkdirs()
        
        println "Creating developmental build package..."
        
        // Try to run native package creation (don't fail if it doesn't work)
        try {
            println "Attempting to create native package..."
            project.tasks.createNativePackage.actions.each { action -> action.execute(project.tasks.createNativePackage) }
        } catch (Exception e) {
            println "Warning: Native package creation failed: ${e.message}"
        }
        
        // Try to run Windows executable creation (don't fail if it doesn't work)
        try {
            println "Attempting to create Windows executable..."
            project.tasks.createWindowsExecutable.actions.each { action -> action.execute(project.tasks.createWindowsExecutable) }
        } catch (Exception e) {
            println "Warning: Windows executable creation failed: ${e.message}"
        }
        
        // Copy all build artifacts
        def artifactsDir = new File(devBuildDir, 'artifacts')
        artifactsDir.mkdirs()
        
        // Copy fat JAR
        def fatJarFile = project.tasks.fatJar.archiveFile.get().asFile
        if (fatJarFile.exists()) {
            def destJar = new File(artifactsDir, fatJarFile.name)
            destJar.bytes = fatJarFile.bytes
            println "✓ Added fat JAR: ${fatJarFile.name}"
        }
        
        // Copy cross-platform distribution
        def crossPlatformDir = new File(buildDir, 'distributions/cross-platform')
        if (crossPlatformDir.exists()) {
            def destCrossPlatform = new File(artifactsDir, 'cross-platform')
            ant.copy(todir: destCrossPlatform.absolutePath) {
                fileset(dir: crossPlatformDir.absolutePath)
            }
            println "✓ Added cross-platform distribution"
        }
        
        // Copy native packages
        def nativeDir = new File(buildDir, 'distributions/native')
        if (nativeDir.exists()) {
            def destNative = new File(artifactsDir, 'native')
            ant.copy(todir: destNative.absolutePath) {
                fileset(dir: nativeDir.absolutePath)
            }
            println "✓ Added native packages"
        }
        
        // Copy Windows executable if available
        def windowsNativeDir = new File(buildDir, 'distributions/windows-native')
        if (windowsNativeDir.exists()) {
            def destWindows = new File(artifactsDir, 'windows-native')
            ant.copy(todir: destWindows.absolutePath) {
                fileset(dir: windowsNativeDir.absolutePath)
            }
            println "✓ Added Windows self-contained executable"
        }
        
        // Copy Windows ZIP if available
        def windowsZip = new File(buildDir, 'distributions/DontLookBack-Windows-SelfContained.zip')
        if (windowsZip.exists()) {
            def destZip = new File(artifactsDir, windowsZip.name)
            destZip.bytes = windowsZip.bytes
            println "✓ Added Windows self-contained ZIP"
        }
        
        // Copy documentation
        def javadocDir = new File(buildDir, 'docs/javadoc')
        if (javadocDir.exists()) {
            def destJavadoc = new File(artifactsDir, 'javadoc')
            ant.copy(todir: destJavadoc.absolutePath) {
                fileset(dir: javadocDir.absolutePath)
            }
            println "✓ Added API documentation"
        }
        
        // Include source code
        def sourceDir = new File(devBuildDir, 'source')
        sourceDir.mkdirs()
        
        // Copy main source code
        def mainSrcDir = new File(project.rootDir, 'src')
        if (mainSrcDir.exists()) {
            def destSrc = new File(sourceDir, 'src')
            ant.copy(todir: destSrc.absolutePath) {
                fileset(dir: mainSrcDir.absolutePath)
            }
            println "✓ Added source code"
        }
        
        // Copy test source code
        def testSrcDir = new File(project.projectDir, 'src/test/java')
        if (testSrcDir.exists()) {
            def destTestSrc = new File(sourceDir, 'test')
            ant.copy(todir: destTestSrc.absolutePath) {
                fileset(dir: testSrcDir.absolutePath)
            }
            println "✓ Added test source code"
        }
        
        // Copy build configuration
        def buildConfigDir = new File(sourceDir, 'build-config')
        buildConfigDir.mkdirs()
        
        // Copy build.gradle
        def buildGradleFile = new File(project.projectDir, 'build.gradle')
        if (buildGradleFile.exists()) {
            def destBuildGradle = new File(buildConfigDir, 'build.gradle')
            destBuildGradle.text = buildGradleFile.text
            println "✓ Added build configuration"
        }
        
        // Copy settings.gradle
        def settingsGradleFile = new File(project.rootDir, 'settings.gradle')
        if (settingsGradleFile.exists()) {
            def destSettingsGradle = new File(buildConfigDir, 'settings.gradle')
            destSettingsGradle.text = settingsGradleFile.text
        }
        
        // Copy gradle.properties
        def gradlePropsFile = new File(project.rootDir, 'gradle.properties')
        if (gradlePropsFile.exists()) {
            def destGradleProps = new File(buildConfigDir, 'gradle.properties')
            destGradleProps.text = gradlePropsFile.text
        }
        
        // Copy version catalog if it exists
        def versionCatalogFile = new File(project.rootDir, 'gradle/libs.versions.toml')
        if (versionCatalogFile.exists()) {
            def destVersionCatalog = new File(buildConfigDir, 'libs.versions.toml')
            destVersionCatalog.text = versionCatalogFile.text
        }
        
        // Copy resources
        def resDir = new File(project.rootDir, 'res')
        if (resDir.exists()) {
            def destRes = new File(sourceDir, 'res')
            ant.copy(todir: destRes.absolutePath) {
                fileset(dir: resDir.absolutePath)
            }
            println "✓ Added game resources"
        }
        
        // Create developmental build info
        def buildInfoFile = new File(devBuildDir, 'BUILD_INFO.txt')
        def currentDate = new Date()
        def dateFormat = new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss')
        dateFormat.setTimeZone(TimeZone.getTimeZone('UTC'))
        buildInfoFile.text = """Don't Look Back - Developmental Build
=====================================

Build Information:
- Build Type: Developmental
- Build Date: ${dateFormat.format(currentDate)} UTC
- Gradle Version: ${project.gradle.gradleVersion}
- Java Version: ${System.getProperty('java.version')}
- Operating System: ${System.getProperty('os.name')} ${System.getProperty('os.version')}

Contents:
=========

artifacts/
├── DontLookBack-1.0-fat.jar          # Self-contained JAR (all platforms)
├── cross-platform/                   # Platform-specific launchers
│   ├── windows/                      # Windows .bat launcher + JAR
│   ├── linux/                        # Linux .sh launcher + JAR
│   └── macos/                        # macOS .command launcher + JAR
├── native/                           # Platform-native packages
│   └── *.deb                         # Linux native package (when available)
├── windows-native/                   # Windows self-contained executable
│   └── DontLookBack/                 # Complete Windows app (no Java required)
├── DontLookBack-Windows-SelfContained.zip # Windows ZIP package
└── javadoc/                          # API documentation

source/
├── src/                              # Main source code
├── test/                             # Test source code
├── res/                              # Game resources and assets
└── build-config/                     # Build configuration files

System Requirements:
===================
- Cross-Platform JAR: Java 17+ required
- Windows Native: No Java installation required (self-contained)
- Linux Native: No Java installation required (if .deb available)
- macOS Native: Java 17+ required (cross-platform version)

Installation Instructions:
=========================

Option 1 - Cross-Platform (Java Required):
1. Ensure Java 17+ is installed
2. Use artifacts/cross-platform/[your-platform]/
3. Run the launcher script for your platform

Option 2 - Windows Native (No Java Required):
1. Use artifacts/windows-native/DontLookBack/
2. Run DontLookBack.exe directly
3. No additional software required

Option 3 - Linux Native (No Java Required):
1. Use artifacts/native/*.deb
2. Install with: sudo dpkg -i DontLookBack_1.0.0-1_amd64.deb
3. Launch from applications menu

Option 4 - Direct JAR:
1. Use artifacts/DontLookBack-1.0-fat.jar
2. Run: java -jar DontLookBack-1.0-fat.jar

For Developers:
==============
- Source code is included in source/ directory
- Build with: gradle buildDevelopmental
- Tests with: gradle test
- See build-config/ for build system configuration

Contact: https://github.com/crnlabs/DLB
"""
        
        println "✓ Created developmental build info"
        println ""
        println "Developmental build completed successfully!"
        println "Location: ${devBuildDir.absolutePath}"
        println ""
        println "Contents:"
        devBuildDir.eachFileRecurse { file ->
            if (file.isFile()) {
                def relativePath = devBuildDir.toPath().relativize(file.toPath())
                println "  - ${relativePath}"
            }
        }
    }
}
