/*
 * Modern Gradle build for Don't Look Back game
 * Uses modern LWJGL 3.x and JBox2D for cross-platform gaming
 */

plugins {
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
    // JUnit Jupiter for testing
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // LWJGL 3.x dependencies (modern, LTS version)
    implementation platform('org.lwjgl:lwjgl-bom:3.3.4')
    
    // Core LWJGL modules for modern graphics
    implementation 'org.lwjgl:lwjgl'
    implementation 'org.lwjgl:lwjgl-opengl'
    implementation 'org.lwjgl:lwjgl-glfw'
    implementation 'org.lwjgl:lwjgl-stb'
    
    // Native libraries for all platforms (cross-platform support)
    runtimeOnly "org.lwjgl:lwjgl::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl::natives-macos"
    
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-macos"
    
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-macos"
    
    runtimeOnly "org.lwjgl:lwjgl-stb::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-stb::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-stb::natives-macos"
    
    // Modern physics engine (replaces legacy JBullet)
    implementation 'org.jbox2d:jbox2d-library:2.2.1.1'
}

// Configure source sets to use modern source structure
sourceSets {
    main {
        java {
            srcDirs = [
                "${project.rootDir}/src/dontlookback/modern",
                "${project.rootDir}/src"
            ]
            // Exclude legacy LWJGL 2.x specific classes only
            exclude '**/DontLookBack.java'           // Legacy main class
            exclude '**/DLB_Graphics.java'           // Legacy graphics system  
            exclude '**/Window.java'                 // Legacy window management
            exclude '**/VersionTest.java'            // Legacy version testing
            // Note: Cube.java is now modernized compatibility wrapper
        }
        resources {
            srcDirs = ["${project.rootDir}/res"]
        }
    }
    
    test {
        java {
            srcDirs = ["${project.rootDir}/test"]
        }
    }
}

// Apply Java toolchain
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

application {
    // Modern main class using LWJGL 3.x
    mainClass = 'dontlookback.modern.ModernDontLookBack'
}

// Create fat JAR task with modern dependencies only
task fatJar(type: Jar) {
    group = 'build'
    description = 'Create a runnable JAR with all modern dependencies included'
    
    archiveBaseName = 'DontLookBack'
    archiveClassifier = 'fat'
    archiveVersion = '1.0'
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    manifest {
        attributes(
            'Main-Class': 'dontlookback.modern.ModernDontLookBack',
            'Implementation-Title': 'Don\'t Look Back - Modern Edition',
            'Implementation-Version': '1.0'
        )
    }
    
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    
    with jar
}

// Make fatJar depend on compileJava
fatJar.dependsOn compileJava

// Configure test framework for modern implementation
tasks.named('test') {
    useJUnitPlatform()
    
    // Enable headless mode for CI/CD compatibility
    systemProperty 'java.awt.headless', 'true'
}

// Run the modern game (default application run)
run {
    mainClass = 'dontlookback.modern.ModernDontLookBack'
    jvmArgs = [
        '-Xms512m',
        '-Xmx1024m',
        // Enable hardware acceleration where available
        '-Dsun.java2d.opengl=true',
        // Use modern G1 garbage collector for better performance
        '-XX:+UseG1GC'
    ]
}

// Task to run headless demo for verification
task runDemo(type: JavaExec) {
    group = 'application'
    description = 'Run headless demo to verify modern dependencies'
    
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'dontlookback.modern.HeadlessDemo'
    
    // Headless mode settings for CI/CD
    jvmArgs = [
        '-Djava.awt.headless=true'
    ]
}

// Comprehensive testing task
task testComprehensive(type: Test) {
    group = 'verification'
    description = 'Run comprehensive test suite'
    
    useJUnitPlatform()
    
    systemProperty 'java.awt.headless', 'true'
    
    testLogging {
        events = ["passed", "skipped", "failed"]
        exceptionFormat = "full"
    }
}

// Task to create executable wrapper scripts
task createExecutable {
    group = 'distribution'
    description = 'Create cross-platform executable wrapper scripts'
    dependsOn fatJar
    
    doLast {
        def distDir = layout.buildDirectory.dir('distributions').get().asFile
        distDir.mkdirs()
        
        // Create batch file for Windows
        def batFile = new File(distDir, 'DontLookBack.bat')
        batFile.text = '''@echo off
echo Don't Look Back - Modern Edition
echo Starting game...
java -jar DontLookBack-1.0-fat.jar
pause
'''
        
        // Create shell script for Unix-like systems
        def shFile = new File(distDir, 'DontLookBack.sh')
        shFile.text = '''#!/bin/bash
echo "Don't Look Back - Modern Edition"
echo "Starting game..."
java -jar DontLookBack-1.0-fat.jar
'''
        shFile.setExecutable(true)
        
        // Copy the fat JAR to distribution directory
        copy {
            from fatJar.archiveFile
            into distDir
        }
        
        println "Cross-platform executable scripts created in build/distributions/"
        println "- DontLookBack.bat (Windows)"
        println "- DontLookBack.sh (Linux/Mac)"
        println "- DontLookBack-1.0-fat.jar"
    }
}

// Task to create Windows .EXE using launch4j-style approach
task createWindowsEXE {
    group = 'distribution'
    description = 'Create Windows .EXE launcher instructions'
    dependsOn fatJar
    
    doLast {
        def distDir = layout.buildDirectory.dir('distributions').get().asFile
        distDir.mkdirs()
        
        // Copy the fat JAR to distribution directory
        copy {
            from fatJar.archiveFile
            into distDir
        }
        
        // Create instructions for EXE creation
        def exeScript = new File(distDir, 'create_exe.bat')
        exeScript.text = '''@echo off
echo Creating Windows executable launcher...
echo.
echo Don't Look Back - Modern Edition
echo.
echo This script demonstrates how to create a Windows .EXE:
echo 1. Use launch4j to wrap the JAR in an EXE
echo 2. Install launch4j from http://launch4j.sourceforge.net/
echo 3. Create a config XML file pointing to the fat JAR
echo 4. Use launch4j to generate the EXE
echo.
echo For immediate use, run the game directly with:
echo java -jar DontLookBack-1.0-fat.jar
echo.
echo Fat JAR available: DontLookBack-1.0-fat.jar
pause
'''
        
        println "Windows EXE creation instructions created in build/distributions/"
        println "- create_exe.bat (instructions for .EXE creation)"
        println "- DontLookBack-1.0-fat.jar (self-contained runnable JAR)"
    }
}

// Build everything
task buildAll {
    group = 'build'
    description = 'Build fat JAR, create executable scripts, and Windows EXE launcher'
    dependsOn fatJar, createExecutable, createWindowsEXE
}
